---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Méthode d'appariement

```{=html}
<iframe src="presentations/TVM_Matching.pdf" width="100%" height="400px"></iframe>
```
[Cliquer ici pour télécharger la présentation](TVM_Matching.pdf).

On a vu dans le chapitre précédent que les comparaisons simples réalisées entre les premières et les dernières aires à avoir été formellement protégées pose problème.

On va maintenant chercher à renforcer la comparabilité entre le goupe de traitment et le groupe de contrôle en réalisant un appariemment (cf. diapos de présentation).

On va utiliser le package {MatchIt}: ne pas hésiter à se référer à [la documentation du package](https://kosukeimai.github.io/MatchIt/index.html).

On va commencer par réaliser quelques ajustements, car {MatchIt} requiert qu'aucune valeur des variables mobilisées ne soit manquante. On va donc retirer les observations comportant des `NA`.

```{r}
library(tidyverse) # Simplifie la manipulation de données
library(lubridate) # Simplifie les opérations sur des dates
library(sf) # Pour traiter les données spatiales
library(MatchIt) # Pour réaliser les appariements.
library(cobalt) # Pour les tests d'équilibre sur l'appariement
library(gt) # Pour faire de jolies tables
library(stargazer) # Pour préssenter les résultats de régressions
library(htmltools)

# Désactiver les notations scientifiques
options(scipen = 999)
# On recharge les données préparées dans le chapitre 3
Vahatra_defor <- read_rds("data/rct_AP_Mada.rds") %>%
  # On renome les variables pour les afficher plus facilement/clairement
  rename(surface_ha = `Surface (ha)`, 
         couv_foret_96 = `Couvert forestier en 1996 (%)`)
         


Vahatra_defor_noNA <- Vahatra_defor %>%
  # On enlève les observations pour lesquelles il manque des valeurs
  filter(!is.na(`Déforestation 1996-2016 (%)`)) %>%
  filter(!is.na(dist_ville) & !is.na(altitude) & !is.na(indice_accidente)) %>%
  # La vatiable de traitement doit être recodée en [0, 1]
  mutate(traitement = ifelse(Groupe == "Traitement", 1, 0)) 

summary(Vahatra_defor_noNA)

Vahatra_defor_noNA %>%
  group_by(Groupe, traitement) %>%
  summarise(effectif = n())

Vahatra_defor_noNA %>%
  group_by(Groupe) %>%
  summarize(`Nombre d'aires protégées` = n()) %>%
  gt() %>%
  tab_header("Observations par groupe avant appariemment") %>%
  tab_source_note("Source : Association Vahatra et Carvalho et al. 2018")
```

Pour commencer, nous allons spécifier le modèle probit qui estime dans quel mesure la propension pour une aire d'avoir été protégée avant 2015 dépend de sa taille, de son taux de couverture forestière en 1996, de son altitude, de son caractère accidenté et de sa distance d'une ville d'au moins 5000 habitants.

Cette spécification peut se représenter selon l'équation suivante qui représente un modèle probit. Un modèle probit, tout comme le logit, est un modèle de choix binaire. La différence majeure entre les deux est leur fonction de liaison respective. Pour le modèle probit, la fonction de liaison est la fonction de répartition de la loi normale standard.

Dans le cadre du modèle probit, $T^∗$ est une variable latente, ou non observée, qui dépend d'une série de prédicteurs:

$$
T^* = \beta_0 + \beta_1 \times \text{surface_ha} + \beta_2 \times \text{couv_foret_96} + \beta_3 \times \text{altitude} + \beta_4 \times \text{indice_accidente} + \beta_5 \times \text{dist_ville} + \epsilon 
$$ {#eq-psm}

Où les variables de cette équation sont définies de la manière suivante :

-   **traitement** : variable dépendante. Dans ce contexte, c'est une variable binaire indiquant si une aire a été traitée ou non.
-   **surface_ha** : Il s'agit de la taille de l'aire en hectares. C'est une variable continue.
-   **couv_foret_96** : C'est le pourcentage de couverture forestière de l'aire en 1996. C'est également une variable continue.
-   **altitude** : Indique l'altitude de l'aire. Encore une fois, c'est une variable continue.
-   **indice_accidente** : Un indice représentant à quel point le terrain est accidenté. C'est probablement une variable continue.
-   **dist_ville** : Distance de l'aire par rapport à la ville la plus proche ayant au moins 5 000 habitants.

Dans l'exemple précédent, la relation entre $T^*$ et $T$ est donnée par :

$$
\begin{align*}
P(\text{traitement} = 1) &= P(T^* > 0) \\
&= \Phi(\beta_0 + \beta_1 \times \text{surface_ha} + \beta_2 \times \text{couv_foret_96} + \beta_3 \times \text{altitude} + \beta_4 \times \text{indice_accidente} + \beta_5 \times \text{dist_ville})
\end{align*}
$$ où $\Phi$ est la fonction de répartition de la loi normale standard.

Ce que cette équation nous dit, c'est que la probabilité que $T$ soit égale à 1 est la probabilité que la variable latente $T^*$ soit supérieure à 0. Cette probabilité est donnée par la valeur de la fonction de répartition de la loi normale standard ($\Phi$) évaluée au niveau linéaire des prédicteurs.

Cette même formule est encodée en R de la manière suivante :

```{r}
#| code-fold: false
pscor <- traitement ~  surface_ha + 
                       couv_foret_96 + 
                       altitude +
                       indice_accidente + 
                       dist_ville
```

On va maintenant réaliser une régression pour connaître l'influence de ces facteurs dans la désignation des aires comme protégées.

```{r}
#| output: false
reg_select <- glm(formula = pscor,
                  family = binomial(link = "probit"),
                  data = Vahatra_defor_noNA)

match_out1 <- stargazer(reg_select, type = "html") 

browsable(HTML(paste(match_out1, collapse = "")))

summary(reg_select)
```

> Exercice : analysez ce résultat. Quels facteurs sont corrélés avec la désignation précoce comme aire protégée ?

On va maintenant utiliser ce modèle pour comparer les aires protégées traitées en premier par rapport à celles traitées plus récemment.

```{r}
# Calcul du matching
def_96_16_match <- matchit(formula = pscor,
                           family = binomial(link = "probit"),
                           method = "nearest",
                           discard = "both",
                           replace = FALSE,
                           distance = "glm",
                           data = Vahatra_defor_noNA)

print(def_96_16_match)
```

On peut maintenant observer les équilibres entre les groupes traités et contrôle avant et après l'appariement.

```{r}
summary(def_96_16_match)
```

> **Exercice** : Etudiez les tables ci-dessus. Quel effet a eu l'appariement sur l'équilibre des variables entre le groupe de traitement et le groupe de contrôle ? Combien d'observation ont été écartées.

On peut observer la distance entre groupe de traitement et de contrôle.

```{r}
plot(def_96_16_match, type = "jitter", interactive = FALSE)
```

On peut également représenter l'équilibre entre les variables avant et après traitement avec les graphiques suivants.

```{r}
bal.plot(def_96_16_match, var.name = "couv_foret_96", which = "both")
```

> **Exercice** : Quel effet a eu l'appariement sur la variable de distance à la ville ? Les autres variables d'appariement produisent-elles un effet aussi visible ?

Le modèle qu'on utilise pour estimer l'impact est très proche de celui exposé ci-dessus, à la différence que la variable de traitement passe dans la partie droite, et qu'elle est remplacée par la déforestation.

$$
\text{Déforestation 1996-2016} = \alpha + \beta_{0}T + \beta_{1}\text{surface_ha} + \beta_{2}\text{couv_foret_96} + \beta_{3}\text{altitude} + \beta_{4}D + \beta_{5}\text{indice_accidente} + \beta_{6}\text{dist_ville} + \varepsilon
$$

Cette formule est codée en R de la manière suivante :

```{r}
# On extrait la donnée de l'appariement

#| code-fold: false
estimp <- `Déforestation 1996-2016 (%)` ~   
                          traitement +
                          surface_ha + 
                          couv_foret_96 + 
                          altitude +
                          indice_accidente + 
                          dist_ville
```

On va donc réaliser une régression, en tenant compte des pondérations générées par l'algorithme d'appariement (variable "weight").

```{r}
#| output: false

# On extrait les données de l'appariement
def_96_16_match_data <- match.data(def_96_16_match)
# On effectue une régression simple avec la formule précédente
def_96_16_match_est <- lm(formula = estimp,
                          data = def_96_16_match_data,
                          weights = weights)
# On visualise les résultats
match_out2 <- stargazer(def_96_16_match_est, type = "html") 

browsable(HTML(paste(match_out2, collapse = "")))
```

### Exercice simple

Analysez, interprétez et critiquez les résultats ci-dessus.

### Exercice intermédiaire

Ajoutez des variables d'interne et modifiez les paramètres de la fonction de matching.

### Exercice avancé

Réalisez une analyse analogue avec les données de déforestation TMF. Rédigez une analyse interprétative.
